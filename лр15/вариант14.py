import time#импортируем модуль time, который предоставляет функции для работы со временем.
def insertion_sort(arr):# определяем функцию insertion_sort, которая будет сортировать переданный ей массив arr по алгоритму сортировки вставками.
    for i in range(1, len(arr)):#начинаем цикл, в котором i принимает значения от 1 до длины массива arr. Этот цикл будет выполняться для каждого элемента, начиная со второго, так как сравнение и перестановки уже выполнены для первого элемента.
        key=arr[i]#сохраняем значение текущего элемента в переменную key.
        j=i-1#инициализируем переменную j значением предыдущего индекса i.
        while j>=0 and arr[j]<key:#начинаем цикл, в котором будут выполняться сравнение и перестановки для текущего элемента.
            arr[j+1]=arr[j]#выполняем перестановку элементов, сдвигая элементы, если они больше key.
            j-=1# уменьшаем значение j на 1, чтобы перейти к следующему элементу.
        arr[j+1]=key#вставляем key на правильное место в отсортированной последовательности.
table = {
    10: 0,
    100: 0,
    1000: 0,
    10000: 0,
    100000: 0}#создаём словарь table, где ключи представляют количество элементов в массиве, а значения изначально равны 0.
for n in table.keys():#начинаем цикл, в котором n будет принимать значения ключей из словаря table.
    arr=list(range(n, 0, -1))#создаём массив arr, который содержит числа от n до 1 в убывающем порядке.
    start_time=time.time()# сохраняем текущее время в переменную start_time.
    insertion_sort(arr)# вызываем функцию insertion_sort для сортировки массива arr.
    end_time=time.time()#сохраняем текущее время в переменную end_time.
    execution_time=end_time-start_time#вычисляем время выполнения сортировки, вычитая start_time из end_time.
    table[n]=execution_time#сохраняем время выполнения в словаре table для соответствующего значения n.
print("Количество элементов:  |  Время выполнения:")#выводим на экран заголовок таблицы с заголовками столбцов.
for n, time in table.items():# начинаем цикл, в котором n будет принимать ключи, а time - соответствующие значения из словаря table.
    print(f"{n}                        {time}")#выводим количество элементов и время выполнения в виде строки с выравниванием по столбцам. Значение n будет выравниваться по левому краю, а time - по правому краю с помощью ф-строки (formatted string).